package DynamicProgramming;

import java.util.Scanner;

public class LongestIncreasingSubsequence {

	public LongestIncreasingSubsequence() {
	}
	static void longestIncreasingSubsequence(int a[]) {
		int maximum = -1;
		int table[] = new int[a.length];
		for (int k = 0; k < table.length; k++)
			table[k] = 1;
		for (int i = 1; i < a.length; i++) {
			for (int j = 0; j < i; j++) {
				if (a[j] < a[i] && table[i] < table[j]+1) {
					table[i] = table[j] + 1;
				}
			}
			if (maximum < table[i])
				maximum = table[i];
		}
		System.out.println("Maximum Increasing Subsequence :- " + maximum);
	}
	
	public static void main(String[] args) {
		  Scanner scanner = new Scanner(System.in);
	        int n = scanner.nextInt();
	        int a[] = new int[n];
	        int counter = 0;
	        while (n != 0) {
	            a[counter++] = scanner.nextInt();
	            n--;
	        }
	        int maximum = -1;
			int table[] = new int[a.length];
			for (int k = 0; k < table.length; k++)
				table[k] = 1;
			for (int i = 1; i < a.length; i++) {
				for (int j = 0; j < i; j++) {
					if (a[j] < a[i] && table[i] < table[j]+1) {
						table[i] = table[j] + 1;
					}
				}
				if (maximum < table[i])
					maximum = table[i];
			}
	        scanner.close();
			System.out.println(maximum);
	}
}
