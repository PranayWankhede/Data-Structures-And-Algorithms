package DynamicProgramming;

import java.util.Arrays;

public class LongestIncreasingSubsequenceImproved {

	public LongestIncreasingSubsequenceImproved() {
		// TODO Auto-generated constructor stub
	}
	
	public static void LIS(int x[]) {
		int parent[] = new int[x.length];
		int increasingSub[] = new int[x.length + 1];
		int length = 0;
		
		for (int i = 0; i < x.length; i++) {
			int low = 1;
			int high = length;
			
			while (low <= high) {
				int mid = (int) Math.ceil((low + high)/2);
				
				if (x[increasingSub[mid]] < x[i])
					low = mid + 1;
				else
					high = mid - 1;
			}
			
			int pos = low;
			
			parent[i] = increasingSub[pos - 1];
			increasingSub[pos] = i;
			
			if (pos > length)
				length = pos;
		}
		
		int[] LIS = new int[length];
		int k = increasingSub[length];
		for (int j = length - 1; j >= 0; j--) {
			LIS[j] = x[k];
			k = parent[k];
		}
		
		System.out.println(Arrays.toString(LIS));
	}

	public static void main(String[] args) {
		int x[] = {3,1,5,2,6,4,9};
		LIS(x);
	}

}
